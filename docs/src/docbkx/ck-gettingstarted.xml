<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0"
    xml:id="ck-gettingstarted">
    <?rax canonical.url.base="http://docs.rackspace.com/keep/api/v1.0/ck-gettingstarted/content"?>
    <title>Rackspace Barbican Getting Started Guide</title>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Barbican</productname>
        <pubdate/>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                who want to programmatically manage orders and secrets
                using the Barbican API.</para>
        </abstract>
        <revhistory>
            <revision>
                <date>2013-12-12</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Created initial outline</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>Getting Started Guide</raxm:displayname>
            <raxm:product version="v1.0">keep</raxm:product>
            <raxm:priority>10</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="Feeds_Doc_Change_History">
        <title>Document Change History</title>
        <para>This version of the Getting Started replaces and
            obsoletes all previous versions. The most recent changes
            are described in the table below:</para>
        <?rax revhistory?>
    </chapter>
    <chapter xml:id="Barbican_Overview">
        <title>Rackspace Barbican API Overview</title>
        <para>Barbican is a REST API that enables secure life-cycle
            management of keys and credentials, called <emphasis
                role="italic">secrets</emphasis>, on behalf of
            customers. This is especially important for customers who
            want to securely store and retrieve credentials
            systematically, and enables customers to have keys
            generated on their behalf based on their requested
            encryption algorithm and bit length. </para>
        <para>This document provides an introduction into the Barbican
            API and explains how to perform basic API calls. </para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Chapter 2 provides an overview of Barbican
                        and lists the service endpoints that are
                        available for the API.</para>
                </listitem>
                <listitem>
                    <para>Chapter 3 shows you how to send requests to
                        the API.</para>
                </listitem>
                <listitem>
                    <para>Chapter 4 explains how to generate an
                        authentication token.</para>
                </listitem>
                <listitem>
                    <para>Chapter 5 shows you how to make API calls by
                        using cURL. It provides examples of how to
                        create and retrieve secrets and orders.</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="What_is_Barbican">
            <title>What is Barbican?</title>
            <para>Barbican is a REST API designed for the secure
                storage, provisioning, and management of <emphasis
                    role="italic">secrets</emphasis> through the
                Secrets resource. Barbican supports the following
                types of secrets.</para>
            <para>
                <table frame="void">
                    <caption>Secret Types Supported by
                        Barbican</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <thead>
                        <tr>
                            <th>Secret type</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Symmetric keys</td>
                            <td>Symmetric keys perform reversible
                                encryption of data at rest, typically
                                by using the AES algorithm set.
                                Symmetric keys are required to enable
                                features, such as encrypted Cloud
                                Object Storage containers and Cloud
                                Block Storage volumes, encrypted Cloud
                                Backups, and so on.</td>
                        </tr>
                        <tr>
                            <td>Asymmetric keys</td>
                            <td>Asymmetric key pairs (sometimes
                                referred to as public and private
                                keys) are used in many scenarios where
                                communication between untrusted
                                parties is necessary. The most common
                                case is with SSL/TLS certificates.
                                Asymmetric keys are also used in
                                solutions like SSH keys, S/MIME (mail)
                                encryption, and digital
                                signatures.</td>
                        </tr>
                        <tr>
                            <td>Raw secrets</td>
                            <td>Barbican stores raw secrets as binary
                                blocks of data that are encrypted.
                                Customers can use the API to store any
                                secrets in any format that they want. </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>Barbican also supports the concept of <emphasis
                    role="italic">orders</emphasis>. The Orders
                resource enables you to specify parameters, including
                an encryption algorithm and bit length, which are used
                to generate a random key. The Secrets resource is used
                for storage of secret data that has already been
                generated.</para>
        </section>
        <section xml:id="Prerequisites_Examples">
            <title>Prerequisites for running examples</title>
            <para>To run the examples in this guide, you must have the
                following: <itemizedlist spacing="compact">
                    <listitem>
                        <para>A Rackspace Cloud account.</para>
                    </listitem>
                    <listitem>
                        <para>A Rackspace Cloud username and password,
                            as specified during registration.</para>
                    </listitem>
                    <listitem>
                        <para>The Git client, which is available for
                            download from <link
                                xlink:href="http://git-scm.com/downloads"
                                >http://git-scm.com/downloads</link>.</para>
                    </listitem>
                    <listitem>
                        <para>cURL, a command-line tool for
                            transferring data with URL syntax. cURL is
                            available for download from: <link
                                xlink:href="http://curl.haxx.se"
                                >http://curl.haxx.se/</link>.</para>
                    </listitem>
                </itemizedlist></para>
        </section>
        <section xml:id="Service_Access_and_Endpoints">
            <title>Service access and endpoints</title>
            <para>The following table summarizes the endpoints to use
                for your Barbican API calls.</para>
            <para>
                <table rules="all" security="external">
                    <caption>Regionalized Service Endpoints</caption>
                    <col width="11%"/>
                    <col width="11%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <thead>
                        <tr align="center">
                            <td colspan="2">Region</td>
                            <td colspan="5">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="2">Chicago (ORD)</td>
                            <td colspan="5"
                                   ><code>https://ord.keep-verify.api.rackspacecloud.com/v1.0/<replaceable>1234</replaceable></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Dallas/Ft. Worth
                                (DFW)</td>
                            <td colspan="5"
                                   ><code>https://dfw.keep-verify.api.rackspacecloud.com/v1.0/<replaceable>1234</replaceable></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Northern Virgina
                                (IAD)</td>
                            <td colspan="5"
                                   ><code>https://iad.keep-verify.api.rackspacecloud.com/v1.0/<replaceable>1234</replaceable></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">London (LON)</td>
                            <td colspan="5"
                                   ><code>https://lon.keep-verify.api.rackspacecloud.com/v1.0/<replaceable>1234</replaceable></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Sydney (SYD)</td>
                            <td colspan="5"
                                   ><code>https://syd.keep-verify.api.rackspacecloud.com/v1.0/<replaceable>1234</replaceable></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Hong Kong (HKG)</td>
                            <td colspan="5"
                                   ><code>https://hkg.keep-verify.api.rackspacecloud.com/v1.0/<replaceable>1234</replaceable></code></td>
                        </tr>
                    </tbody>
                </table>Replace the sample account ID number,
                    <replaceable>1234</replaceable>, with your actual
                account number returned as part of the authentication
                response. Use your actual account number wherever you
                see the placeholder
                    <replaceable>tenantId</replaceable> specified in
                this guide. </para>
            <note>
                <itemizedlist>
                    <listitem>
                        <para>Choose the endpoint from the table for
                            the data center where your Cloud resources
                            are located.</para>
                    </listitem>
                    <listitem>
                        <para>All examples in this guide assume that
                            you are operating against the DFW data
                            center. If you are using a different data
                            center, be sure to use the associated
                            endpoint from the table instead.</para>
                    </listitem>
                </itemizedlist>
            </note>
        </section>
    </chapter>
    <chapter xml:id="Feeds_Sending_API_Requests">
        <title>Sending requests to the API</title>
        <para>You have several options for sending requests through an
            API: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>Developers and testers might prefer to use cURL,
                    the command-line tool from <link
                        xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. </para>
                <para>With cURL, you can send HTTP requests and
                    receive responses back from the command line.
                </para>
            </listitem>
            <listitem>
                <para>If you prefer using a graphical interface, the
                    REST client for Mozilla Firefox also works well
                    for testing and trying out commands. See <link
                        xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                        >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>. </para>
            </listitem>
            <listitem>
                <para>You can download and install RESTclient, a Java
                    application used to test RESTful web services,
                    from <link
                        xlink:href="http://code.google.com/p/rest-client/"
                        >http://code.google.com/p/rest-client/</link>. </para>
            </listitem>
        </itemizedlist>
        <section xml:id="Feeds_using-curl-cli">
            <title>Sending API requests using cURL</title>
            <para>cURL is a command-line tool that is available in
                most UNIX system-based environments and Apple Mac OS X
                systems, and can be downloaded for Microsoft Windows
                to interact with REST interfaces. For more information
                about cURL, visit <link
                    xlink:href="http://curl.haxx.se/"
                    >http://curl.haxx.se/</link>. </para>
            <para>cURL enables you to transmit and receive HTTP
                requests and responses from the command line or from
                within a shell script. As a result, you can work with
                the REST API directly without using one of the client
                APIs. </para>
            <para>The following cURL command-line options are used in
                this guide to run the examples.</para>
            <para>
                <table frame="void">
                    <caption>cURL command-line options</caption>
                    <col width="31%"/>
                    <col width="69%"/>
                    <thead>
                        <tr>
                            <th>Option</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><option>-d</option></td>
                            <td>Sends the specified data in a POST
                                request to the HTTP server</td>
                        </tr>
                        <tr>
                            <td><option>-i</option></td>
                            <td>Includes the HTTP header in the
                                output.</td>
                        </tr>
                        <tr>
                            <td><option>-H HEADER</option></td>
                            <td>Specifies an HTTP header in the
                                request.</td>
                        </tr>
                        <tr>
                            <td><option>-X</option></td>
                            <td>Specifies the request method to use
                                when communicating with the HTTP
                                server. The specified request is used
                                instead of the default method, which
                                is GET. For example, <option>-X
                                   PUT</option> specifies to use the
                                PUT request method.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>
                <note>
                    <para>If you have the tools, you can run the cURL
                        JSON request examples with the following
                        options to format the output from cURL:
                            <emphasis role="bold">&lt;curl JSON
                            request example&gt; | python
                            -mjson.tool</emphasis>.</para>
                </note>
            </para>
            <para>To run the cURL request examples shown in this guide
                on Linux or Mac systems, perform the following
                actions:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para> Copy each example from the HTML version
                            of this guide an paste it into a text
                            editor (for example, vi or TextEdit). </para>
                    </listitem>
                    <listitem>
                        <para> Modify each example with your required
                            account information and other information,
                            as detailed in this guide.</para>
                        <para>
                            <note>
                                <para>The carriage returns in the cURL
                                   request examples that are part of
                                   the cURL syntax are escaped with a
                                   backslash (\) to avoid prematurely
                                   terminating the command. However,
                                   you should not escape carriage
                                   returns inside the XML or JSON
                                   message within the command.</para>
                            </note>
                        </para>
                        <para>Consider the following cURL
                            authentication tequest: XML example, which
                            is described in detail in <xref
                                linkend="Generating_Auth_Token"
                            />:</para>
                        <example>
                            <title>cURL Authentication Request:
                                XML</title>
                            <?dbfo keep-together="always"?>
                            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
 &lt;auth&gt;
    &lt;apiKeyCredentials
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
        username="<emphasis role="italic">yourUserName</emphasis>"
        apiKey="<emphasis role="italic">yourApiKey</emphasis>"/&gt;
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                        </example>
                        <para>The lines that are part of the cURL
                            command syntax have been escaped with a
                            backslash (\) to indicate that the command
                            continues on the next line:</para>
                        <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \


(... lines within the xml portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)


 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                        <para>However the lines
                                <emphasis>within</emphasis> the XML
                            portion of the message are
                                <emphasis>not</emphasis> escaped with
                            a backslash (\), to avoid issues with the
                            XML processing:</para>
                        <screen language="bash">'&lt;?xml version="1.0" encoding="UTF-8"?>
 &lt;auth&gt;
    &lt;apiKeyCredentials
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
        username="<emphasis role="italic">yourUserName</emphasis>"
        apiKey="<emphasis role="italic">yourApiKey</emphasis>"/&gt;
 &lt;/auth&gt;<option>'</option> \
</screen>
                        <para>The final line of the XML message is
                            escaped since the backslash lies
                                <emphasis>outside</emphasis> the XML
                            message and continues the cURL command to
                            the next line.</para>
                    </listitem>
                    <listitem>
                        <para>After you are finished modifying the
                            text for the cURL request example with
                            your information (for example <emphasis
                                role="italic">yourUserName</emphasis>
                            and <emphasis role="italic"
                                >yourApiKey</emphasis>), paste it into
                            your terminal window. </para>
                        <para>If you have trouble copying and pasting
                            the examples as described, try typing the
                            entire example on one long line, removing
                            all the backslash line-continuation
                            characters.</para>
                    </listitem>
                    <listitem>
                        <para>Press <guilabel>Enter</guilabel> to run
                            the cURL command.</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Generating_Auth_Token">
        <title>Generating an authentication token</title>
        <para>Whether you use cURL or a REST client to interact with
            the Barbican API, you must generate an authentication
            token. You provide this token in the X-Auth-Token header
            in each Barbican API request. </para>
        <para>Examples 4.1 and 4.2 demonstrate how to use cURL to
            obtain the authentication token and your account number.
            You must provide both when making subsequent Barbican API
            requests.</para>
        <para>Remember to replace the placeholder names in the
            following authentication request examples with your
            information:</para>
        <para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para><emphasis role="italic"
                            >yourUserName</emphasis> - Your common
                        Rackspace Cloud username, as supplied during
                        registration.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="italic"
                            >yourApiKey</emphasis> - Your API access
                        key. You can obtain the key from the Rackspace
                            <link
                            xlink:href="http://mycloud.rackspace.com/"
                            >Cloud Control Panel</link> by selecting
                            <emphasis role="bold">Account
                            Settings</emphasis> from the <emphasis
                            role="italic">yourAccount</emphasis> menu
                        in the top-right corner of the window. </para>
                </listitem>
            </itemizedlist>
        </para>
        <para> You can use either of the following endpoints to access
            the authentication service, which is called Rackspace
            Cloud Identity, regardless of US or UK identities: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>https://identity.api.rackspacecloud.com/v2.0/</para>
            </listitem>
            <listitem>
                <para>https://lon.identify.api.rackspacecloud.com/v2.0/</para>
            </listitem>
        </itemizedlist>
        <para> Your account might be based in either the US or the UK.
            The location of your account is not determined by your
            physical location but by the location of the Rackspace
            retail site that was used to create your account: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspacecloud.com"
                        >http://www.rackspacecloud.com</link>, it is a
                    US-based account. </para>
            </listitem>
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspace.co.uk"
                        >http://www.rackspace.co.uk</link>, it is a
                    UK-based account. </para>
            </listitem>
        </itemizedlist>
        <para>Notice that you authenticate by using a special URL for
            the Cloud identify service. For example, you can use
                <code>https://identity.api.rackspacecloud.com/v2.0/tokens</code>,
            as shown in the following request examples. Note that the
                <code>v2.0</code> component in the URL indicates that
            you are using version 2.0 of the Cloud Identity
            API.</para>
        <note>
            <para>For UK-based accounts, you can use
                    <code>https://lon.identity.api.rackspacecloud.com/v2.0/tokens</code>
                instead.</para>
        </note>
        <example>
            <title>cURL authenticate request: XML</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<emphasis role="bold"><emphasis role="italic">yourUserName</emphasis></emphasis>"
         apiKey="<emphasis role="bold"><emphasis role="italic">yourApiKey</emphasis></emphasis>"/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <example>
            <title>cURL Authenticate Request: JSON</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {
          "username": "<emphasis role="bold"><emphasis role="italic">yourUserName</emphasis></emphasis>",
          "apiKey": "<emphasis role="bold"><emphasis role="italic">yourApiKey</emphasis></emphasis>"}
    }
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <para>The authentication token <code>id</code> is returned
            with an <code>expires</code> attribute that specifies when
            the token expires. </para>
        <note>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>The values that you receive in your response
                        vary because they are specific to your
                        account.</para>
                </listitem>
                <listitem>
                    <para>The information shown in the authentication
                        request examples above is for US-based
                        accounts. If you authenticate against the
                        UK-endpoint for the authorization service, you
                        see the service catalog information for
                        UK-based accounts.</para>
                </listitem>
                <listitem>
                    <para> The <code>expires</code> attribute denotes
                        the time after which the token will
                        automatically expire. A token may be manually
                        revoked before the time identified by the
                            <code>expires</code> attribute;
                            <code>expires</code> predicts a token's
                        maximum possible lifespan but does not
                        guarantee that it will reach that lifespan.
                        Clients are encouraged to cache a token until
                        it expires.</para>
                </listitem>
                <listitem>
                    <para>Applications should be designed to
                        re-authenticate after receiving a 401
                        (Unauthorized) response from a service
                        endpoint.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>The actual account number is located after the final
            slash (/) in the <code>publicURL</code> field. In the
            response examples in this guide, the account number is
            123456. You must specify your account number on most of
            the Barbican API operations, wherever you see the
            placeholder <emphasis role="bold">tenant id</emphasis>
            specified in the examples in this guide.</para>
        <para>After authentication, you can use cURL to perform
                <command>GET</command> and <command>POST</command>
            requests for the Barbican API.</para>
    </chapter>
    <chapter xml:id="Use_Barbican_API">
        <title>Using the Barbican API</title>
        <para>This chaper explains how to use the Barbican API to do
            the following:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Create an order to generate a secret</para>
                </listitem>
                <listitem>
                    <para>Store a secret</para>
                </listitem>
                <listitem>
                    <para>Retrieve secret metadata</para>
                </listitem>
                <listitem>
                    <para>Retrieve a secret</para>
                </listitem>
                <listitem>
                    <para>Retrieve multiple secrets</para>
                </listitem>
                <listitem>
                    <para>Retrieve multiple orders</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="Create_a_Secret">
            <title>Creating an order to generate a secret</title>
            <para>You use the orders resource to generate a secret.
                The ordering object encapsulates the workflow and
                history for the creation of a secret. </para>
            <para>To create an order that generates a secret, complete
                the following steps:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>Upload a plain-text order by submitting
                            a <command>POST</command> request at a
                            command-line interface, as shown in the
                            following example:</para>
                        <para>
                            <programlisting language="json"><xi:include href="./samples/reqCreateOrder.json" parse="text"/></programlisting>
                        </para>
                        <para>If the call is successful, you will
                            receive a response like the following one:</para>
                        <para>
                            <programlisting> {"order_ref":
      "https://ord.keep-verify.api.rackspacecloud.com/v1/123456/orders/62d57f53-ecfe-4ae4-87bd-fab2f24e29bc"} </programlisting>
                        </para></listitem>
                    <listitem>
                        <para>Record the order ID that is returned in
                            the response (in the example,
                            62d57f53-ecfe-4ae4-87bd-fab2f24e29bc). You
                            will use this ID for the next
                            request.</para>
                    </listitem>
                    <listitem>
                        <para>Retrieve the order by typing the
                            following command:</para>
                        <para>
                            <programlisting>curl -H 'Accept: text/plain' &lt;http://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId></emphasis>/orders/&lt;<emphasis role="italic">orderId</emphasis>></programlisting>
                        </para>
                        <para>If the call is successful, it will
                            return a response like the following
                            one:</para>
                        <para>
                            <programlisting language="json"><xi:include href="./samples/resCreateSecret.json" parse="text"/></programlisting>
                        </para>
                    </listitem>
                    <listitem><para>Record the secret ID that is returned in the response (in this
                            example,
                            6c3ccd7d-46b6-4ece-9a58-a1be26b2758a). </para></listitem>
                    <listitem>
                        <para>Retrieve the metadata for the generated
                            secret by typing the following
                            command:</para>
                        <para>
                            <programlisting>curl -H 'Accept: application/json' https://<replaceable>endpointURL</replaceable>/v1/<replaceable>tenantId</replaceable>/secrets/<replaceable>secretId</replaceable></programlisting>
                        </para>
                        <para>If the call is successful, you receive a
                            response like the following one:</para>
                        <para>
                            <programlisting language="json"><xi:include href="./samples/resRetrieveSecret.json" parse="text"/></programlisting>
                        </para>
                        <para>The example shows a secret of type AES
                            key. The status of the secret is
                            active.</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
        <section xml:id="Retrieve_Order_Status">
            <title>Retrieve order status</title>
            <para>You can submit a <command>GET</command> request to
                retrieve the status of an order. An order can have one
                of the following statuses: ACTIVE, PENDING, or ERROR. </para>
            <para>To retrieve the order status, type the following
                command:</para>
            <para>
                <programlisting>curl -H 'Accept: application/json' &lt;http://<replaceable>endpointURL</replaceable>/v1/<replaceable>tenantId</replaceable>/orders/<replaceable>orderId</replaceable></programlisting>
            </para>
            <para>The following example shows an order with an ACTIVE
                status:
                <programlisting>{
    "status": "ACTIVE",
    "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/123456/secrets/8a78d5e4-524a-4e81-96cc-c7d16ed85515",
    "updated": "2014-04-02T14:52:26.987458",
    "created": "2014-04-02T14:52:26.921043",
    "secret": {
        "name": "secretname",
        "algorithm": "aes",
        "payload_content_type": "application/octet-stream",
        "expiration": null,
        "bit_length": 256,
        "mode": "cbc"
         },
    "order_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/123456/orders/b63d2c05-5d53-4db6-af06-4e388044deb8"
}</programlisting>The
                following example shows an order with the status set
                to PENDING. Note that a secret ID is not returned, but
                in its place is a series of question marks.</para>
            <para><programlisting>{
     "status": "PENDING",
     "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/123456/secrets/????",
     "updated": "2014-03-19T22:40:06.720872",
     "created": "2014-03-19T22:40:06.720860",
     "secret": {
           "name": "secretname",
           "algorithm": "aes",
           "payload_content_type": "application/octet-stream",
           "expiration": null,
            "bit_length": 256,
            "mode": "cbc"
             },
            "order_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/123456/orders/94ade532-9657-41e1-87ae-c8cbdfa836e0"
 }</programlisting></para>
        </section>
        <section xml:id="Store_a_Secret">
            <title>Storing a secret</title>
            <para>You can use the secrets resource to store a secret
                in the database.</para>
            <para>You can use one of the following methods to store a
                secret:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Submit a <command>POST</command> request
                            against the secrets resource and include
                            the secret metadata in the payload
                            parameter.</para>
                    </listitem>
                    <listitem>
                        <para>Submit a <command>POST</command> request
                            without a payload against the secrets
                            resource and then include the payload in a
                            subsequent <command>PUT</command>
                            request.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <note>
                    <para>Submitting a <command>POST</command> request
                        creates secret <emphasis role="italic"
                            >metadata</emphasis>. If the payload is
                        provided with the <command>POST</command>
                        request, then it is encrypted and stored, and
                        then linked with this metadata. If no payload
                        is included with the <command>POST</command>
                        request, it must be provided with a subsequent
                            <command>PUT</command> request. Generating
                        a secret using the secret resource differs
                        from generating a secret via the orders
                        resource. Creating a secret through the
                        secrets resource only generates secret
                        metadata. If you use the orders resource to
                        create a secret, Barbican generates the actual
                        secret information.</para>
                </note>
            </para>
        <section xml:id="Storing_a_secret_using_POST">
            <title>Storing a Secret Using a POST Request</title>
            <para>The following example shows how to generate a secret
                in the format of an AES key by submitting a
                    <command>POST</command> request wth the secret
                payload specified against the secrets resource.</para>
            <para>
                <programlisting language="json"><xi:include href="./samples/reqCreateSecret.json" parse="text"/></programlisting>
            </para>
            <para>If the request is successful, you will receive a
                    response like the following:
                    <programlisting>
    "secret_ref": "http://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets/a8957047-16c6-4b05-ac57-8621edd0e9ee"
</programlisting></para>
            <para>The example above shows the <emphasis role="italic"
                    >secretId</emphasis>, which will be returned in a
                successful response.</para>
                <section xml:id="Storing_a_Secret_using_Put_and_Post">
                    <title>Storing a Secret Using a POST and PUT
                        Request</title>
                    <para>You can store a secret by first submitting a
                        POST request without specifying the secret
                        payload and then submitting a subsequent PUT
                        request with the payload.</para>
                    <para>To go through this 2-step process of
                        creating a secret, complete the following
                        steps:</para>
                    <para>
                        <orderedlist>
                            <listitem>
                                <para>Submitting a
                                   <command>POST</command> request
                                   against the secrets resource
                                   without any of the payload
                                   parameters specified as shown in
                                   the following example.</para>
                       <para><programlisting language="json"><xi:include href="./samples/reqCreateSecretwithoutPayload.json" parse="text"/></programlisting></para></listitem>
                            <listitem><para>If the request is successful, you will
                                receive a response like the following:</para>
                         <para><programlisting>
 "secret_ref": "http://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets/a8957047-16c6-4b05-ac57-8621edd0e9ee"</programlisting></para>
                            <para>Note the <emphasis role="italic"
                                   >secretId</emphasis>, which will be
                                   returned in a successful response.
                                   You need to pass this secret id in
                                   the subsequent PUT request.</para></listitem>
                            <listitem>
                                <para>Using the <emphasis
                                   role="italic">secretId
                                   </emphasis>that you obtained in the
                                   previous step, submit a
                                   <command>PUT</command> request
                                   against the secrets resource with
                                   the payload parameters specified as
                                   shown in the following
                                   example.</para>
<para><programlisting language="json"><xi:include href="./samples/reqUpdateSecret.json" parse="text"/></programlisting></para>
                            <para>If the call is successful, the
                                   <emphasis role="italic"
                                   >secretId</emphasis> will be
                                   returned in the response.</para></listitem>
                        </orderedlist>
                    </para>
                </section>
        </section>
        </section>
        <section xml:id="Retrieve_Secret_Metadata">
            <title>Retrieving Secret Metadata</title>
            <para>After you have created and stored a secret, you can
                submit a <command>GET</command> request to retrieve
                the secret metadata. <command>GET</command> requests
                return only metadata about the secret, and not the
                decrypted secret information itself. </para>
            <para>The following example shows how to retrieve secret
                metadata by submitting a <command>GET</command>
                request against the endpoint URL with the <emphasis
                    role="italic">tenantID</emphasis> and <emphasis
                    role="italic">secretId </emphasis> parameters
                specified and the <emphasis role="italic"
                    >Accept</emphasis> header set to <emphasis
                    role="italic">application/json</emphasis>.</para>
            <para>
                <programlisting>curl -H 'Accept: application/json' https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>secrets/&lt;<emphasis role="italic">secretId</emphasis>></programlisting>
            </para>
            <para>If the call is successful, you will receive a
                response like the following: <programlisting language="json"><xi:include href="./samples/reqCreateSecretwithoutPayload.json" parse="text"/></programlisting>
                <note>
                    <para>If you set the <emphasis role="italic"
                            >Accept</emphasis> header to <emphasis
                            role="italic"
                            >application/octet-stream</emphasis> in
                        the <command>GET</command> request, it will
                        return the binary secret data in the place of
                        the secret metadata. The format is not
                        intended for regular text consumption and will
                        be unreadable.</para>
                </note></para>
        </section>
        <section xml:id="Generate_an_AES_Key">
            <title>Retrieving Multiple Secrets</title>
            <para>You can retrieve multiple secrets that have been
                generated for a given tenant by typing the following
                at a command-line interface:</para>
            <para>
                <programlisting>curl -H 'Accept: application/JSON' &lt;http://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets</programlisting>
            </para>
            <para>If the call is successful, you will receive a
                response like the
                following:<programlisting>{
    "secrets": [
        {
            "status": "ACTIVE",
            "secret_ref": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets/9150d09b-7791-4c2a-90cc-1592e2ff67ac",
            "updated": "2014-03-19T22:39:55.136579",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:55.136567",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantID</emphasis>>/secrets/2e21bffa-2b81-432a-9bcb-2533593bcd34",
            "updated": "2014-03-19T22:39:56.018075",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:56.018061",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        }, 
        {
            "status": "ACTIVE",
            "secret_ref": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets/54bf3411-0765-467c-ba76-ba96c527e990",
            "updated": "2014-03-19T22:40:17.100402",
            "name": "secretname",
            "algorithm": "aes",
            "created": "2014-03-19T22:40:17.100389",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "cbc",
            "bit_length": 256,
            "expiration": null
        }
    ],
    "total": 84,
    "next": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets?limit=10&amp;offset=10"
}</programlisting>
            </para>
        </section>
        <section xml:id="Retrieve_Multiple_Orders">
            <title>Retrieving Multiple Orders</title>
            <para>You can use a <command>GET</command> request to
                retrieve multiple orders that have been generated for
                a given tenant. To do so, type the following at a
                command-line interface:</para>
            <para>
                <programlisting>curl -H 'Accept: application/JSON' &lt;http://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/orders        </programlisting>
            </para>
            <para>If the call is successful, you will receive a
                response like the
                following:<programlisting>{
    "total": 15,
    "orders": [
        {
            "status": "PENDING",
            "secret_ref": "&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/secrets/????",
            "updated": "2014-03-19T22:40:06.720872",
            "created": "2014-03-19T22:40:06.720860",
            "secret": {
                "name": "secretname",
                "algorithm": "aes",
                "payload_content_type": "application/octet-stream",
                "expiration": null,
                "bit_length": 256,
                "mode": "cbc"
            },
            "order_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/&lt;<emphasis role="italic">tenantId</emphasis>>/orders/94ade532-9657-41e1-87ae-c8cbdfa836e0"
        },
        {
            "status": "PENDING",
            "secret_ref": "&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantID</emphasis>>/secrets/????",
            "updated": "2014-03-19T22:41:18.930095",
            "created": "2014-03-19T22:41:18.930081",
            "secret": {
                "name": "secretname",
                "algorithm": "aes",
                "payload_content_type": "application/octet-stream",
                "expiration": null,
                "bit_length": 256,
                "mode": "cbc"
            },
            "order_ref": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantID</emphasis>>/orders/50212509-9c87-4a71-be3e-9ad59c290ede"
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantID</emphasis>>/secrets/6e0bfe9f-8a59-4e29-81af-ea57eec96f28",
            "updated": "2014-03-25T16:42:20.584453",
            "created": "2014-03-25T16:42:20.430822",
            "secret": {
                "name": "secretname",
                "algorithm": "aes",
                "payload_content_type": "application/octet-stream",
                "expiration": null,
                "bit_length": 256,
                "mode": "cbc"
            },
            "order_ref": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantID</emphasis>>/orders/488cd596-f1a6-4abe-8cb0-16608f5b0359"
        }
    ],
    "next": "https://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantID</emphasis>>/orders?limit=10&amp;offset=10"
}</programlisting>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Barbican_Next_Steps">
        <title>Next Steps</title>
        <para>To learn more details about the Barbican API, do the
            following:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Read the Rackspace Barbican API Developer
                        Guide</para>
                </listitem>
            </itemizedlist>
        </para>
    </chapter>
</book>
