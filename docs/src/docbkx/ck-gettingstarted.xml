<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0"
    xml:id="ck-gettingstarted">
    <?rax canonical.url.base="http://docs.rackspace.com/keep/api/v1.0/ck-gettingstarted/content"?>
    <title>Rackspace Barbican API Getting Started Guide</title>
    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Barbican</productname>
        <pubdate/>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                who want to programmatically manage orders and secrets
                using the Barbican API.</para>
        </abstract>
        <revhistory>
            <revision>
                <date>2013-12-12</date>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <para>Created initial outline</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:displayname>Getting Started Guide</raxm:displayname>
            <raxm:product version="v1.0">keep</raxm:product>
            <raxm:priority>10</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="Feeds_Doc_Change_History">
        <title>Document Change History</title>
        <para>This version of the Getting Started replaces and
            obsoletes all previous versions. The most recent changes
            are described in the table below:</para>
        <?rax revhistory?>
    </chapter>
    <chapter xml:id="Barbican_Overview">
        <title>Rackspace Barbican API Overview</title>
        <para>Barbican is a REST API that is designed for the secure
            storage, provisioning and management of secrets. This
            document provides an introduction into the Barbican API
            and explains how to do basic API calls. In this guide you
            will learn the following:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Chapter 2 lists the service endpoints that
                        are available for the Barbican API.</para>
                </listitem>
                <listitem>
                    <para>Chapter 3 teaches how to send requests to
                        the Barbican API.</para>
                </listitem>
                <listitem>
                    <para>Chapter 4 explains how to gnerate an
                        authentication token.</para>
                </listitem>
                <listitem>
                    <para>Chapter 5 teaches how to make API calls
                        using cURL. It provides examples how to create
                        and retrieve secrets and orders.</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="What_is_Barbican">
            <title>What is Barbican?</title>
            <para>Barbican is a REST API designed for the secure
                storage, provisioning and management of secrets.
                Barbican supports the following types of
                secrets:</para>
            <para>
                <table frame="void">
                    <caption>Secret Types Supported by
                        Barbican</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <thead>
                        <tr>
                            <th>Secret Type</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Symmetric Keys</td>
                            <td>Perform reversible encryption of data
                                at rest, typically using the AES
                                algorithm set. Symmetric keys are
                                required to enable features, such as
                                encrypted Swift containers and Cinder
                                volumes, encrypted Cloud Backups,
                                etc.</td>
                        </tr>
                        <tr>
                            <td>Asymmetric Keys</td>
                            <td>Asymmetric key pairs (sometimes
                                referred to as public / private keys)
                                are used in many scenarios where
                                communication between untrusted
                                parties is desired. The most common
                                case is with SSL/TLS certificates.
                                Asymmetric keys but are also used in
                                solutions like SSH keys, S/MIME (mail)
                                encryption and digital
                                signatures.</td>
                        </tr>
                        <tr>
                            <td>Raw Secrets</td>
                            <td>Barbican stores secrets as binary
                                blocks of data (encrypted, naturally).
                                Clients can use the API to store any
                                secrets in any format they desire.
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
        </section>
        <section xml:id="Prerequisites_Examples">
            <title>Prerequisites for Running Examples</title>
            <para>In order to run the examples in this guide, you must
                have the following: <itemizedlist spacing="compact">
                    <listitem>
                        <para>A Rackspace Cloud account</para>
                    </listitem>
                    <listitem>
                        <para>A Rackspace Cloud username and password,
                            as specified during registration</para>
                    </listitem>
                    <listitem>
                        <para>The Git client. This is available for
                            download from  <link
                                xlink:href="http://git-scm.com/downloads"
                                >http://git-scm.com/downloads</link>.</para>
                    </listitem>
                    <listitem>
                        <para>cURL, a command line tool for
                            transferring data with URL syntax. cURL is
                            available for download from: <link
                                xlink:href="http://curl.haxx.se"
                                >http://curl.haxx.se/</link>.</para>
                    </listitem>
                </itemizedlist></para>
        </section>
        <section xml:id="Service_Access_and_Endpoints">
            <title>Service Access and Endpoints</title>
            <para>The following table summarizes the endpoints to use
                for your Barbican API calls.</para>
            <para>
                <table rules="all" security="external">
                    <caption>Regionalized Service Endpoints</caption>
                    <col width="11%"/>
                    <col width="11%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <col width="16%"/>
                    <thead>
                        <tr align="center">
                            <td colspan="2">Region</td>
                            <td colspan="5">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="2">Chicago (ORD)</td>
                            <td colspan="5"
                                ><code>https://&lt;https://ord.keep-verify.api.rackspacecloud.com></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Dallas/Ft. Worth
                                (DFW)</td>
                            <td colspan="5"
                                ><code>https://&lt;https://dfw.keep-verify.api.rackspacecloud.com></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Northern Virgina
                                (IAD)</td>
                            <td colspan="5"
                                ><code>https://&lt;https://iad.keep-verify.api.rackspacecloud.com></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">London (LON)</td>
                            <td colspan="5"
                                ><code>https://&lt;https://lon.keep-verify.api.rackspacecloud.com></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Sydney (SYD)</td>
                            <td colspan="5">
                                <code>https://&lt;https://syd.keep-verify.api.rackspacecloud.com></code></td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Hong Kong (HKG)</td>
                            <td colspan="5">
                                <code>https://&lt;https://hkg.keep-verify.api.rackspacecloud.com></code></td>
                        </tr>
                    </tbody>
                </table>Replace the sample account ID number, 1234,
                with your actual account number returned as part of
                the authentication response. Use your actual account
                number wherever you see the placeholder <emphasis
                    role="bold">tenantId</emphasis> specified in this
                guide. </para>
            <note>
                <itemizedlist>
                    <listitem>
                        <para>Choose the endpoint from the table for
                            the datacenter where your Cloud resources
                            are located.</para>
                    </listitem>
                    <listitem>
                        <para>All examples in this guide assume that
                            you are operating against the DFW
                            datacenter, however if you are using a
                            different datacenter, be sure to use the
                            associated endpoint from the table above
                            instead.</para>
                    </listitem>
                </itemizedlist>
            </note>
        </section>
    </chapter>
    <chapter xml:id="Feeds_Sending_API_Requests">
        <title>Sending Requests to the API</title>
        <para>You have several options for sending requests through an
            API: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para>Developers and testers might prefer to use cURL,
                    the command-line tool from <link
                        xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. </para>
                <para>With cURL, you can send HTTP requests and
                    receive responses back from the command line.
                </para>
            </listitem>
            <listitem>
                <para>If you like to use a more graphical interface,
                    the REST client for Firefox, also works well for
                    testing and trying out commands. See <link
                        xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                        >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>.
                </para>
            </listitem>
            <listitem>
                <para>You can also download and install RESTclient, a
                    Java application used to test RESTful web
                    services, from <link
                        xlink:href="http://code.google.com/p/rest-client/"
                        >http://code.google.com/p/rest-client/</link>.
                </para>
            </listitem>
        </itemizedlist>
        <section xml:id="Feeds_using-curl-cli">
            <title>Sending API Requests Using cURL</title>
            <para>cURL is a command-line tool that is available oin
                most UNIX system-based environments and Apple Mac OS X
                systems, and can be downloaded for Microsoft Windows
                to interact with REST interfaces. For more information
                on cURL, visit <link xlink:href="http://curl.haxx.se/"
                    >http://curl.haxx.se/</link>. </para>
            <para>cURL allows you to transmit and receive HTTP
                requests and responses from the command-line or from
                within a shell script. This makes it possible to work
                with the ReST API directly without using one of the
                client APIs. </para>
            <para>The following cURL command-line options are used in
                this guide to run the examples.</para>
            <para>
                <table frame="void">
                    <caption>cURL Command-Line Options</caption>
                    <col width="31%"/>
                    <col width="69%"/>
                    <thead>
                        <tr>
                            <th>Option</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td><option>-d</option></td>
                            <td>Sends the specified data in a POST
                                request to the HTTP server</td>
                        </tr>
                        <tr>
                            <td><option>-i</option></td>
                            <td>Includes the HTTP header in the
                                output.</td>
                        </tr>
                        <tr>
                            <td><option>-H HEADER</option></td>
                            <td>Specifies an HTTP header in the
                                request.</td>
                        </tr>
                        <tr>
                            <td><option>-X</option></td>
                            <td>Specifies the request method to use
                                when communicating with the HTTP
                                server.The specified request is used
                                instead of the default method, which
                                is GET. For example, <option>-X
                                   PUT</option> specifies to use the
                                PUT request method.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>
                <note>
                    <para>If you have the tools, you can run the cURL
                        JSON request examples with the following
                        options to format the output from cURL:
                            <emphasis role="bold">&lt;curl JSON
                            request example&gt; | python
                            -mjson.tool</emphasis>.</para>
                </note>
            </para>
            <para>To run the cURL request examples shown in this guide
                on Linux or Mac systems, perform the following
                actions:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para> Copy each example from the HTML version
                            of this guide an paste it into an ASCII
                            text editor (for example, vi or TextEdit).
                        </para>
                    </listitem>
                    <listitem>
                        <para> Modify each example with your required
                            account information and other information,
                            as detailed in this guide.</para>
                        <para>
                            <note>
                                <para>The carriage returns in the cURL
                                   request examples that are part of
                                   the cURL syntax are escaped with a
                                   backslash ('\') in order to avoid
                                   prematurely terminating the
                                   command. However you should not
                                   escape carriage returns inside the
                                   xml or json message within the
                                   command.</para>
                            </note>
                        </para>
                        <para>Consider the following cURL Authenticate
                            Request: XML example that is described in
                            detail in <xref
                                linkend="Generating_Auth_Token"
                            />:</para>
                        <example>
                            <title>cURL Authentication Request:
                                XML</title>
                            <?dbfo keep-together="always"?>
                            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="italic">yourUserName</emphasis>"     
        apiKey="<emphasis role="italic">yourApiKey</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                        </example>
                        <para>The lines that are part of the cURL
                            command syntax have been escaped with a
                            backslash ('\') to indicate that the
                            command continues on the next line:</para>
                        <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
  
   
(... lines within the xml portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)     
     

   
 &lt;/auth&gt;<option>'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
                        <para>However the lines
                                <emphasis>within</emphasis> the xml
                            portion of the message are
                                <emphasis>not</emphasis> escaped with
                            a backslash ('\') in order to avoid issues
                            with the xml processing:</para>
                        <screen language="bash">'&lt;?xml version="1.0" encoding="UTF-8"?>
 &lt;auth&gt;   
    &lt;apiKeyCredentials     
        xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"     
        username="<emphasis role="italic">yourUserName</emphasis>"     
        apiKey="<emphasis role="italic">yourApiKey</emphasis>"/&gt;   
 &lt;/auth&gt;<option>'</option> \
</screen>
                        <para>The final line of the xml message is
                            escaped since the backslash lies
                                <emphasis>outside</emphasis> the xml
                            message and continues the cURL command to
                            the next line.</para>
                    </listitem>
                    <listitem>
                        <para>After you are finished modifying the
                            text for the cURL request example with
                            your information (for example <emphasis
                                role="italic">yourUserName</emphasis>
                            and <emphasis role="italic"
                                >yourApiKey</emphasis>), paste it into
                            your terminal window. Then execute the
                            cURL command by pressing
                                <guilabel>Enter</guilabel>.</para>
                        <para>If you have trouble copying and pasting
                            the examples as described, try typing the
                            entire example on one long line, removing
                            all the backs.</para>
                    </listitem>
                    <listitem>
                        <para>Press <guilabel>Enter</guilabel> to run
                            the cURL command.</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Generating_Auth_Token">
        <title>Generating an Authentication Token</title>
        <para>Whether you use cURL or a REST client to interact with
            the Barbican API, you must generate an authentication
            token. You provide this token in the X-Auth-Token header
            in each Barbican API request. </para>
        <para>Examples 4.1 and 4.2 demonstrate how to use cURL to
            obtain the authentication token and your account number.
            You must provide both when making subsequent Cloud Feeds
            API requests.</para>
        <para>Remember to replace the placeholder names in the
            following authentication request examples with your
                information:<itemizedlist spacing="compact">
                <listitem>
                    <para><emphasis role="italic"
                            >yourUserName</emphasis> &mdash; Your
                        common Rackspace Cloud username, as supplied
                        during registration.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="italic"
                            >yourApiKey</emphasis> &mdash; Your API
                        access key. You can obtain the key from the
                        Rackspace <link
                            xlink:href="http://mycloud.rackspace.com/"
                            >Cloud Control Panel</link>) by accessing
                        selecting <emphasis role="bold">Account
                            Settings</emphasis> from the <emphasis
                            role="italic">yourAccount</emphasis> menu
                        in the top-right corner of the window. </para>
                </listitem>
            </itemizedlist></para>
        <para> You can use either of the following endpoints to access
            the Authentication Service, regardless of US or UK
            identities: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para><link xlink:href="&ENDPOINT-US-20;"
                        >&ENDPOINT-US-20;</link>
                </para>
            </listitem>
            <listitem>
                <para><link xlink:href="&ENDPOINT-UK-20;"
                        >&ENDPOINT-UK-20;</link></para>
            </listitem>
        </itemizedlist>
        <para> Your account might be based in either the US or the UK;
            this is not determined by your physical location but by
            the location of the Rackspace retail site which was used
            to create your account: </para>
        <itemizedlist spacing="compact">
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspacecloud.com"
                        >http://www.rackspacecloud.com</link>, it is a
                    US-based account. </para>
            </listitem>
            <listitem>
                <para> If your account was created via <link
                        xlink:href="http://www.rackspace.co.uk"
                        >http://www.rackspace.co.uk</link>, it is a
                    UK-based account. </para>
            </listitem>
        </itemizedlist>
        <para>Notice that you authenticate by using a special URL for
            the Cloud authentication service. For example, you may use
                <code>https://identity.api.rackspacecloud.com/v2.0/tokens</code>,
            as shown in the following Authenticate Request examples.
            Note that the <code>v2.0</code> component in the URL
            indicates that you are using version 2.0 of the Cloud
            Authentication API.</para>
        <note>
            <para>For UK-based accounts, you may decide to use
                    <code>'https://lon.identity.api.rackspacecloud.com/v2.0/tokens'</code>
                instead.</para>
        </note>
        <example>
            <title>cURL Authenticate Request: XML</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<emphasis role="bold">yourUserName</emphasis>"
         apiKey="<emphasis role="bold">yourApiKey</emphasis>"/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <example>
            <title>cURL Authenticate Request: JSON</title>
            <?dbfo keep-together="always"?>
            <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {
          "username": "<emphasis role="bold">yourUserName</emphasis>",
          "apiKey": "<emphasis role="bold">yourApiKey</emphasis>"}
    }
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
        </example>
        <para>The authentication token <code>id</code> is returned
            along with an <code>expires</code> attribute that
            specifies when the token expires. </para>
        <note>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>The values that you receive in your
                        responses vary from the examples shown in this
                        document because they are specific to your
                        account.</para>
                </listitem>
                <listitem>
                    <para>The information shown in the authentication
                        response examples above is for US-based
                        accounts. If you authenticate against the
                        UK-endpoint for authorization service, you see
                        the service catalog information for UK-based
                        accounts.</para>
                </listitem>
                <listitem>
                    <para> The <code>expires</code> attribute denotes
                        the time after which the token will
                        automatically expire. A token may be manually
                        revoked before the time identified by the
                        expires attribute; <code>expires</code>
                        predicts a token's maximum possible lifespan
                        but does not guarantee that it will reach that
                        lifespan. Clients are encouraged to cache a
                        token until it expires.</para>
                </listitem>
                <listitem>
                    <para>Applications should be designed to
                        re-authenticate after receiving a 401
                        (Unauthorized) response from a service
                        endpoint.</para>
                </listitem>
            </itemizedlist>
        </note>
        <para>The actual account number is located after the final
            slash (/) in the <code>publicURL</code> field. In the
            following examples, the account number is 1100111. You
            must specify your account number on most of the Barbican
            API operations, wherever you see the placeholder <emphasis
                role="bold">tenant id</emphasis> specified in the
            examples in this guide.</para>
        <para>After authentication, you can use cURL to perform &GET;
            and &POST; requests for the Barbican API.</para>
    </chapter>
    <chapter xml:id="Use_Barbican_API">
        <title>Using the Barbican API</title>
        <para>In this chapter you will learn how to use the Barbican
            API to do the following:</para>
        <para>
            <itemizedlist>
                <listitem>
                    <para>Store a secret</para>
                </listitem>
                <listitem>
                    <para>Retrieve secret metadata</para>
                </listitem>
                <listitem>
                    <para>Retrieve a secret</para>
                </listitem>
                <listitem>
                    <para>Create an order to generate a secret</para>
                </listitem>
                <listitem>
                    <para>Generate an AES key</para>
                </listitem>
                <listitem>
                    <para>Retrieve order status</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="Store_a_Secret">
            <title>Creating a Secret</title>
            <para>You can use the Barbican API to create and store a
                secret. </para>
            <para>You can use the Barbican API to create secrets using
                one of the 2 methods:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Submit a <command>POST </command>request
                            and include the secret metadata in the
                            payload parameter.</para>
                    </listitem>
                    <listitem>
                        <para>Submit a <command>POST</command> request
                            without a payload and then include the
                            payload in a subsequent
                                <command>PUT</command> request.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <note>
                    <para>Submitting a <command>POST</command> request
                        creates secret <emphasis role="italic"
                            >metadata</emphasis>. If the payload is
                        provided with the <command>POST</command>
                        request, then it is encrypted and stored, and
                        then linked with this metadata. If no payload
                        is included with the <command>POST</command>
                        request, it must be provided with a subsequent
                            <command>PUT</command> request. Generating
                        a secret using the secret resource differs
                        from generating a secret via the orders
                        resource. Creating a secret through the
                        secrets resource only generates secret
                        metadata. If you use the orders resource to
                        create a secret, Barbican generates the actual
                        secret information.</para>
                </note>
            </para>
            <para>The following example shows how to generate a secret
                in the format of an AES key by submitting a
                    <command>POST</command> request wth the secret
                payload specified against the secrets resource.</para>
            <para>
                <programlisting language="json"><xi:include href="./samples/reqCreateSecret.json" parse="text"/></programlisting>
            </para>
            <para>If the request is successful, you will receive a
                response like the following:
                <programlisting>
    "secret_ref": "http://&lt;endpointURL>/v1/&lt;tenantId>/secrets/a8957047-16c6-4b05-ac57-8621edd0e9ee"
}</programlisting></para>
            <para>The example above shows the <emphasis role="italic"
                    >secretId</emphasis>, which will be returned in a
                successful response.</para>
        </section>
        <section xml:id="Retrieve_Secret_Metadata">
            <title>Retrieving Secret Metadata</title>
            <para>After you have created and stored a secret, you can
                submit a <command>GET</command> request to retrieve
                the secret metadata. <command>GET</command> requests
                return only metadata about the secret, and not the
                decrypted secret information itself. </para>
            <para>This allows for a more rapid response for large
                secrets, or large lists of secrets. It also supports
                multi-part secrets,such as SSL certificates, which may
                have both a public and private key portion that could
                be individually retrieved.</para>
            <para>The following example shows how to retrieve secret
                metadata by submitting a <command>GET</command>
                request against the endpoint URL with the <emphasis
                    role="italic">tenantID</emphasis> and <emphasis
                    role="italic">secretId </emphasis> parameters
                specified.</para>
            <para>
                <programlisting>curl -H 'Accept: application/json' https://&lt;endpointURL>/v1/&lt;tenantId>secrets/&lt;secretId></programlisting>
            </para>
            <para>You will receive a response like the following:
                <programlisting>
{
  "status": "ACTIVE",
  "updated": "2013-06-28T15:23:33.092660",
  "name": "AES key",
  "algorithm": "AES",
  "mode": "cbc",
  "bit_length": 256,
  "content_types": {
    "default": "application/octet-stream"
  },
  "expiration": "2013-05-08T16:21:38.134160",
  "secret_ref": "http://&lt;endpointURL>/v1/&lt;tenantId>/secrets/888b29a4-c7cf-49d0-bfdf-bd9e6f26d718",
}</programlisting>
            </para>
        </section>
        <section xml:id="Create_a_Secret">
            <title>Creating an Order to Generate a Secret</title>
            <para>To generate a secret, you need to use the orders
                resource, which is described in more detail in the
                Barbican Developer Guide. You use the orders resource
                to generate an order, which will then generate a
                secret.</para>
            <para>To generate an order, complete the following
                steps:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>Upload a plain-text order by submitting
                            a POST request as shown in the following
                            example:</para>
                        <para>
                            <programlisting language="json"><xi:include href="./samples/reqCreateOrder.json" parse="text"/></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>You will receive a response like the
                            following. Make sure to note the <emphasis
                                role="italic">orderId</emphasis> that
                            is returned in the URL. You will use this
                            id for the next request.</para>
                        <para>
                            <programlisting> {"order_ref":
      "http://&lt;endpointURL>/v1/&lt;tenantId>/orders/62d57f53-ecfe-4ae4-87bd-fab2f24e29bc"} </programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Retrieve the order by typing the
                            following at a command-line
                            interface:</para>
                        <para>
                            <programlisting>curl -H 'Accept: text/plain' &lt;http://&lt;<emphasis role="italic">endpointURL</emphasis>>/v1/&lt;<emphasis role="italic">tenantId></emphasis>/orders/&lt;<emphasis role="italic">orderId</emphasis>></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>The call will return a response like the
                            following. Make sure to note the <emphasis
                                role="italic">secretId </emphasis>that
                            is returned in the URL.</para>
                        <para>
                            <programlisting language="json"><xi:include href="./samples/resCreateSecret.json" parse="text"/></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Retrieve the metadata for the generated
                            secret by typing the following at a
                            command-line interface:</para>
                        <para>
                            <programlisting>curl -H 'Accept: text/plain' &lt;http://&lt;endpointURL>v1/&lt;tenantId>/secrets/&lt;secretId></programlisting>
                        </para>
                    </listitem>
                    <listitem>
                        <para>This call will return a response like
                            the following:</para>
                        <para>
                            <programlisting language="json"><xi:include href="./samples/resRetrieveSecret.json" parse="text"/></programlisting>
                        </para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
        <section xml:id="Generate_an_AES_Key">
            <title>Retrieving Multiple Secrets</title>
            <para>The following example shows how to create a secret
                in the form of an AES key by typing the following at a
                command line-interface:</para>
            <para>
                <programlisting>curl -H 'Accept: application/JSON' &lt;http://&lt;endpointURL>v1/&lt;tenantId>/secrets</programlisting>
            </para>
            <para>You will receive an intelligible response like the
                following:
                <programlisting>{
    "secrets": [
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/9150d09b-7791-4c2a-90cc-1592e2ff67ac",
            "updated": "2014-03-19T22:39:55.136579",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:55.136567",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/7023ceaf-d770-43c9-91ae-ffa49db64290",
            "updated": "2014-03-19T22:39:55.572853",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:55.572839",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/2e21bffa-2b81-432a-9bcb-2533593bcd34",
            "updated": "2014-03-19T22:39:56.018075",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:56.018061",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/490a6613-d0f5-4df2-b2a9-72633d997e7c",
            "updated": "2014-03-19T22:39:56.470524",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:56.470514",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/01ff3743-bf75-450a-a5e9-7314999139d4",
            "updated": "2014-03-19T22:39:57.010835",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:57.010824",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/28f0f40d-e48b-4e12-8f74-feb77f95292c",
            "updated": "2014-03-19T22:39:57.699848",
            "name": "aes_key",
            "algorithm": "aes",
            "created": "2014-03-19T22:39:57.699836",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "CDC",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "updated": "2014-03-19T22:40:01.199864",
            "name": "c6b1b39a-88f6-496c-9c4b-7869de00b06f",
            "algorithm": null,
            "created": "2014-03-19T22:40:01.199850",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/c6b1b39a-88f6-496c-9c4b-7869de00b06f",
            "mode": null,
            "bit_length": null,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "updated": "2014-03-19T22:40:13.297315",
            "name": "3a8f2250-de3f-447b-b5e5-fcf2113c9a31",
            "algorithm": null,
            "created": "2014-03-19T22:40:13.297305",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/3a8f2250-de3f-447b-b5e5-fcf2113c9a31",
            "mode": null,
            "bit_length": null,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/f5de8592-6c62-4964-827c-a716a4a18689",
            "updated": "2014-03-19T22:40:14.713585",
            "name": "secretname",
            "algorithm": "aes",
            "created": "2014-03-19T22:40:14.713569",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "cbc",
            "bit_length": 256,
            "expiration": null
        },
        {
            "status": "ACTIVE",
            "secret_ref": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets/54bf3411-0765-467c-ba76-ba96c527e990",
            "updated": "2014-03-19T22:40:17.100402",
            "name": "secretname",
            "algorithm": "aes",
            "created": "2014-03-19T22:40:17.100389",
            "content_types": {
                "default": "application/octet-stream"
            },
            "mode": "cbc",
            "bit_length": 256,
            "expiration": null
        }
    ],
    "total": 84,
    "next": "https://ord.keep-verify.api.rackspacecloud.com/v1/545436309/secrets?limit=10&amp;offset=10"
}</programlisting>
            </para>
        </section>
        <section xml:id="Retrieve_Order_Status">
            <title>Retrieving an Order</title>
            <para>After you have generated a secret, you need to
                verify that you can retrieve and view the
                secret.</para>
            <para>To view the secret in the format of random bytes,
                type the following at a command line-interface:</para>
            <para>
                <programlisting>curl -H 'Accept: application/octet-stream' &lt;secret_ref id from the previous call></programlisting>
            </para>
            <para>You will receive an intelligible response like the
                following:
                <programlisting>�l6[F���#��r�|gd�fe~���</programlisting>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Barbican_Next_Steps">
        <title>Next Steps</title>
        <para>To learn more details about the Barbican API, please
            read the Barbican API Developer Guide.</para>
    </chapter>
</book>
